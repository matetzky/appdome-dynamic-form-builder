{"ast":null,"code":"var _jsxFileName = \"/Users/jmatetzky/Desktop/test-app-dome/appdome-dynamic-form-builder/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport FormsList from \"./components/FormsList/FormsList\";\nimport NewForm from \"./components/NewFormPopup/NewFormPopup\";\nimport Form from \"./components/Form/Form\";\nimport { faCirclePlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport FormDetails from \"./components/FormDetails/FormDetails\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [forms, setForms] = useState([]);\n  const [showNewForm, setShowNewForm] = useState(false);\n  const [selectedFormId, setSelectedFormId] = useState(null);\n  const [selectedForm, setSelectedForm] = useState(null);\n  const [fieldsOfCurrentForm, setFieldsOfCurrentForm] = useState([]);\n\n  // This useEffect is triggered when a form is selected or when it's fields have been modified\n  // It receives the local changes in a form's fields and updates the global forms state inside the App component\n  useEffect(() => {\n    const updatedForms = forms.map(form => {\n      if (form.id === selectedFormId) {\n        return {\n          ...form,\n          fields: [...fieldsOfCurrentForm]\n        };\n      }\n      return form;\n    });\n    setForms(updatedForms);\n  }, [fieldsOfCurrentForm, selectedFormId]);\n\n  // Displays the new form popup\n  const handleNewFormClick = () => {\n    setShowNewForm(true);\n  };\n\n  // Initiating of a new form\n  const handleNewFormSubmit = newFormName => {\n    const newForm = {\n      id: Date.now(),\n      name: newFormName,\n      fields: []\n    };\n    setForms([...forms, newForm]);\n    setShowNewForm(false);\n  };\n\n  // Trigered when a form is selected\n  const handleFormClick = formId => {\n    setSelectedFormId(formId);\n  };\n\n  // Selects a form to be displayed as JSON\n  const handleViewFormDetails = form => {\n    setSelectedForm(form);\n  };\n  const handleDeleteForm = formId => {\n    setForms(forms.filter(form => form.id !== formId));\n  };\n\n  // sent to every form as a prop to allow modification of the global forms state inside the App component\n  const updateCurrentFormFields = currentEditedFormFields => {\n    const updatedForms = forms.map(form => {\n      if (form.id === selectedFormId) {\n        return {\n          ...form,\n          fields: [...form.fields, currentEditedFormFields]\n        };\n      }\n      return form;\n    });\n    setForms(updatedForms);\n  };\n  const handleFormClose = () => {\n    setSelectedFormId(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"header-title\",\n      children: \"My Forms\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(FormsList, {\n        forms: forms,\n        handleFormClick: handleFormClick,\n        handleDeleteForm: handleDeleteForm,\n        className: \"forms-list\",\n        handleViewFormDetails: handleViewFormDetails\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"new-form-button\",\n        onClick: handleNewFormClick,\n        children: [\"Create New Form\", /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faCirclePlus,\n          className: \"create-new-form-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), showNewForm && /*#__PURE__*/_jsxDEV(NewForm, {\n        handleNewFormSubmit: handleNewFormSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 25\n      }, this), selectedFormId && /*#__PURE__*/_jsxDEV(Form, {\n        form: forms.find(form => form.id === selectedFormId),\n        updateCurrentFormFields: setFieldsOfCurrentForm,\n        handleClose: handleFormClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(FormDetails, {\n        form: selectedForm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"B78Gvak6+nKnQdwhzSBHNjdewis=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","FormsList","NewForm","Form","faCirclePlus","FontAwesomeIcon","FormDetails","jsxDEV","_jsxDEV","App","_s","forms","setForms","showNewForm","setShowNewForm","selectedFormId","setSelectedFormId","selectedForm","setSelectedForm","fieldsOfCurrentForm","setFieldsOfCurrentForm","updatedForms","map","form","id","fields","handleNewFormClick","handleNewFormSubmit","newFormName","newForm","Date","now","name","handleFormClick","formId","handleViewFormDetails","handleDeleteForm","filter","updateCurrentFormFields","currentEditedFormFields","handleFormClose","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","icon","find","handleClose","_c","$RefreshReg$"],"sources":["/Users/jmatetzky/Desktop/test-app-dome/appdome-dynamic-form-builder/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport FormsList from \"./components/FormsList/FormsList\";\nimport NewForm from \"./components/NewFormPopup/NewFormPopup\";\nimport Form from \"./components/Form/Form\";\nimport { faCirclePlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport FormDetails from \"./components/FormDetails/FormDetails\"\nimport \"./App.css\";\n\nconst App = () => {\n  const [forms, setForms] = useState([]);\n  const [showNewForm, setShowNewForm] = useState(false);\n  const [selectedFormId, setSelectedFormId] = useState(null);\n  const [selectedForm, setSelectedForm] = useState(null);\n  const [fieldsOfCurrentForm, setFieldsOfCurrentForm] = useState([]);\n\n\n  // This useEffect is triggered when a form is selected or when it's fields have been modified\n  // It receives the local changes in a form's fields and updates the global forms state inside the App component\n  useEffect(() => {\n      const updatedForms = forms.map((form) => {\n        if (form.id === selectedFormId) {\n          return {\n            ...form,\n            fields: [...fieldsOfCurrentForm],\n          };\n        }\n        return form;\n      });\n      setForms(updatedForms);\n    \n  }, [fieldsOfCurrentForm, selectedFormId])\n\n  // Displays the new form popup\n  const handleNewFormClick = () => {\n    setShowNewForm(true);\n  };\n\n  // Initiating of a new form\n  const handleNewFormSubmit = (newFormName) => {\n    const newForm = {\n      id: Date.now(),\n      name: newFormName,\n      fields: [],\n    };\n\n    setForms([...forms, newForm]);\n    setShowNewForm(false);\n  };\n\n  // Trigered when a form is selected\n  const handleFormClick = (formId) => {\n    setSelectedFormId(formId);\n  };\n\n  // Selects a form to be displayed as JSON\n  const handleViewFormDetails = (form) => {\n    setSelectedForm(form);\n  };\n\n  const handleDeleteForm = (formId) => {\n    setForms(forms.filter((form) => form.id !== formId));\n  };\n\n  // sent to every form as a prop to allow modification of the global forms state inside the App component\n  const updateCurrentFormFields = (currentEditedFormFields) => {\n    const updatedForms = forms.map((form) => {\n      if (form.id === selectedFormId) {\n        return {\n          ...form,\n          fields: [...form.fields, currentEditedFormFields],\n        };\n      }\n      return form;\n    });\n    setForms(updatedForms);\n  };\n\n  const handleFormClose = () => {\n    setSelectedFormId(null);\n  };\n\n  return (\n    <div>\n      <h1 className=\"header-title\">My Forms</h1>\n\n      <div className=\"content\">\n\n        {/* List of Forms */}\n          <FormsList\n            forms={forms}\n            handleFormClick={handleFormClick}\n            handleDeleteForm={handleDeleteForm}\n            className=\"forms-list\"\n            handleViewFormDetails={handleViewFormDetails}\n          />\n\n        {/* New Form Window */}\n        <button className=\"new-form-button\" onClick={handleNewFormClick}>\n          Create New Form\n          <FontAwesomeIcon\n            icon={faCirclePlus}\n            className=\"create-new-form-icon\"\n          />\n        </button>\n        {showNewForm && <NewForm handleNewFormSubmit={handleNewFormSubmit} />}\n\n        {/* Selected Form */}\n        {selectedFormId && (\n          <Form\n            form={forms.find((form) => form.id === selectedFormId)}\n            updateCurrentFormFields={setFieldsOfCurrentForm}\n            handleClose={handleFormClose}\n          />\n        )}\n         <FormDetails form={selectedForm} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}